server:
  port: 8003
spring:
  application:
    name: order-service
  cloud:
    #nacos既可以支持AP友可以支持CP，根据需要进行切换
    #切换的命令为curl -X PUT '$NACOS_SERVER:8848/nacos/v1/ns/operator/swiches?entry=serverMode&value=CP'
    nacos:
      discovery:
        server-addr: localhost:8848
    sentinel:
      transport:
        dashboard: localhost:8081
        port: 8719
service-url:
  nacos-user-service: http://payment-service
management:
  endpoints:
    web:
      exposure:
        include: "*"

#sentinel
#流控规则
  #资源名：唯一名称，默认请求路径
  #针对来源：Sentinel可以针对调用者进行限流，填写微服务名，默认为default（不区分来源）
  #阈值类型/单机阈值：
     #QPS（每秒钟的请求数量）：当调用该API的QPS达到阈值时，则进行限流
     #线程数:当调用该API的线程数达到阈值时，进行限流,（每次访问允许程序处理的线程数量）
  #是否集群：不需要集群
  #流控模式：先拿到Rest地址
     #直接：API达到限流条件时，直接限流
     #关联：当关联的资源达到阈值时，就限流自己（当与A关联的资源B达到阈值时，就限流A自己，订单 -> 支付）
     #链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）【API级别的针对来源】
  #流控效果：
     #快速失败：直接失败，抛出异常，默认显示Blocked By sentinel
     #warm up: 根据codeFactor（冷加载因子默认为3）的值，从阈值 除 codeFactor，经过预热时长才达到设置的QPS阈值，秒杀系统开启的瞬间，并发请求量瞬时较大防止系统崩溃
     #排队等待: 匀速排队，让请求匀速的速度通过，阈值类型必须设置为QPS，否则无效(只允许QPS有)


#降级规则  当资源被降级后，在接下来的降级时间窗口期间内，对该资源的调用都会被自动被熔断（默认行为是抛出DegradeException）
          #sentinel的断路器无 半开 状态的
  #资源名：唯一名称，默认请求路径
  #降级策略
     #RT: 平均响应时间，秒级。平均响应时间 超出阈值 且 在时间窗口期内通过的请求数 >= 5，两个条件同时满足后触发降级
          #窗口期过后关闭断路器，RT最大4900（更大的值需要-Dcsp.sentinel.statistic.max.rt = XXXX才能生效）
     #异常比例：秒级。QPS >= 5且异常的比例（秒级统计）超过阈值时，触发降级。时间窗口期结束后，关闭降级。
     #异常数: 异常数(分钟级)超过阈值时，触发降级；时间窗口结束后，关闭降级。（时间窗口一定要大于等于60秒）


#热点规则  （仅支持QPS）热点就是经常访问的数据，并对其访问进行限制。热点参数限流会统计传入参数的热点参数，并且根据配置的限流阈值和模式，对包含
          #热点参数的资源调用进行限流，热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。BlockException源码

